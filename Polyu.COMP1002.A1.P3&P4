Q3
Firstly, create an integer variation to store the English letter number and initialize it into
0.
Then, read the string by the first character.
Transform the character into ASCII code.
If the ASCII code is between 65-122 (including 65 and 122) then the integer variation
plus one.
#That means this character is an English alphabet (including uppercase and
#lowercase)
Then move to the second character While reaching
the end, print the integer variation.
Q4
Input an unsigned integer
Generate a trial integer
initialize the trial integer into 2
while the input integer is larger the trial integer:
if the input integer can be exactly divided by the trial integer
output “It’s not a prime.”
end the program
else
plus one to the trial integer
output “It’s a prime.”
end the program
I think it is not efficient, because it has to do as many times of adding and dividing as
the input integer value. And we have already known that only even number except 2
can be a prime. so we can just examine the odd number (except 2) and use odd to take
the try. This could decrease about a half of calculating works. 
